Vagrant.configure("2") do |config|
  config.vm.provider :virtualbox do |v|
    #    v.memory = 1024
    # v.memory = 2048
    # v.memory = 4096
    v.memory = 8192
    v.cpus = 4
  end

  config.vm.provision :shell, privileged: true, inline: $install_common_tools

  config.vm.define :master do |master|
    master.vm.box = "c_boxes/ubuntu2204-base"
    master.vm.box_version = "0.4.0"
    master.vm.hostname = "master"
    master.vm.network "public_network", bridge: "eno1"
    master.vm.network "private_network", ip: "10.0.0.10"
    # to allow the ip address from above it needs to be added. Check here for details: https://www.virtualbox.org/manual/ch06.html#network_hostonly
    master.vm.provision :shell, privileged: false, inline: $provision_master_node
  end

  %w{worker1 worker2}.each_with_index do |name, i|
    config.vm.define name do |worker|
      worker.vm.box = "c_boxes/ubuntu2204-base"
      worker.vm.box_version = "0.4.0"
      worker.vm.hostname = name
      worker.vm.network "private_network", ip: "10.0.0.#{i + 11}"
      worker.vm.provision "shell", privileged: false, inline: <<-SHELL
sudo /vagrant/join.sh
# echo "KUBELET_EXTRA_ARGS=--node-ip=10.0.0.#{i + 11}" | sudo tee /etc/sysconfig/kubelet
echo 'Environment="KUBELET_EXTRA_ARGS=--node-ip=10.0.0.#{i + 11}"' | sudo tee -a /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

sudo systemctl daemon-reload
sudo systemctl restart kubelet
SHELL
    end
  end
end

# This will be installed on all the nodes and master
$install_common_tools = <<-SCRIPT

# disable swap and add kernel settings
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF
sudo modprobe overlay
sudo modprobe br_netfilter

sudo tee /etc/sysctl.d/kubernetes.conf <<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

# Reload the changes from above
sudo sysctl --system

# Installing the dependencies so containerd can be installed
sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates

# Install the docker repository
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg
sudo add-apt-repository --yes "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

# Install containerd
sudo apt update
sudo apt install -y containerd.io

# Configure containerd to use systemd as the cgroup
containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

# Restart and enable containerd
sudo systemctl restart containerd
sudo systemctl enable containerd

# Install the Kubernetes Repos
sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo apt-add-repository --yes "deb http://apt.kubernetes.io/ kubernetes-xenial main"
# sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-jammy main"
sudo apt update

# Install Kubernetes
sudo apt install -y kubelet=1.26.0-00 kubeadm=1.26.0-00 kubectl=1.26.0-00
sudo apt-mark hold kubelet=1.26.0-00 kubeadm=1.26.0-00 kubectl=1.26.0-00

# Installing Docker. This is not needed for the cluster to work correctly. This is only added if wanting to run Docker on the nodes
# Adding tools to download and install Docker
sudo apt install -y apt-transport-https ca-certificates curl software-properties-common

# Add the GPG key for the official Docker repo
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# Adding the Docker repository
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt update

# Installing docker 
sudo apt install -y docker-ce=5:23.0.1-1~ubuntu.22.04~jammy

# Putting the user in the docker group so sudo isn't needed
sudo usermod -aG docker ${USER}
newgrp docker

SCRIPT

$provision_master_node = <<-SHELL
OUTPUT_FILE=/vagrant/join.sh
rm -rf $OUTPUT_FILE

# Start cluster
sudo kubeadm init --apiserver-advertise-address=10.0.0.10 --pod-network-cidr=192.168.0.0/16 | grep -E -- "kubeadm join|--discovery-token-ca-cert-hash" > ${OUTPUT_FILE}
chmod +x $OUTPUT_FILE

# Configure kubectl
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Fix kubelet IP
echo 'Environment="KUBELET_EXTRA_ARGS=--node-ip=10.0.0.10"' | sudo tee -a /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

# Restart the daemon
sudo systemctl daemon-reload
sudo systemctl restart kubelet

# Installing Calico
#kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/tigera-operator.yaml
#kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/custom-resources.yaml

# Installing flannel. The default install is using 10.244.0.0/16 for the IP range. This cluster is using something different so it needs to be changed. Flannel is the easier option
# wget https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
# sed -i 's/10.244/192.168/g' kube-flannel.yml
# kubectl apply -f kube-flannel.yml

SHELL
