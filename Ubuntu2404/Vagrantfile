Vagrant.configure("2") do |config|
  config.vm.provider :virtualbox do |v|
    v.memory = 4096
    # v.memory = 8192
    v.cpus = 4
  end

  config.vm.provision :shell, privileged: true, inline: $install_common_tools

  config.vm.define :master do |master|
    master.vm.box = "m_boxes/ubuntu_2404_server"
    master.vm.box_version = "0.3.0"
    master.vm.hostname = "master"
    master.vm.network "public_network", bridge: "eno1"
    master.vm.network "private_network", ip: "10.0.0.10"
    master.vm.network "forwarded_port", guest: 8080, host: 8080
    # to allow the ip address from above it needs to be added. Check here for details: https://www.virtualbox.org/manual/ch06.html#network_hostonly
    master.vm.provision :shell, privileged: false, inline: $provision_master_node
  end

  %w{worker1 worker2}.each_with_index do |name, i|
    config.vm.define name do |worker|
      worker.vm.box = "m_boxes/ubuntu_2404_server"
      worker.vm.box_version = "0.3.0"
      worker.vm.hostname = name
      worker.vm.network "private_network", ip: "10.0.0.#{i + 11}"
      worker.vm.provision "shell", privileged: false, inline: <<-SHELL
sudo /vagrant/join.sh
# echo "KUBELET_EXTRA_ARGS=--node-ip=10.0.0.#{i + 11}" | sudo tee /etc/sysconfig/kubelet
# sudo mkdir /etc/systemd/system/kubelet.service.d
# sudo touch /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
# echo 'Environment="KUBELET_EXTRA_ARGS=--node-ip=10.0.0.#{i + 11}"' | sudo tee -a /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
sudo rm /etc/default/kubelet
sudo touch /etc/default/kubelet
echo "KUBELET_EXTRA_ARGS=--node-ip=10.0.0.#{i + 11}" | sudo tee -a /etc/default/kubelet


sudo systemctl daemon-reload
sudo systemctl restart kubelet
SHELL
    end
  end
end

# This will be installed on all the nodes and master
$install_common_tools = <<-SCRIPT

# disable swap and add kernel settings
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

# sudo tee /etc/modules-load.d/containerd.conf <<EOF
# overlay
# br_netfilter
# EOF

sudo modprobe overlay
sudo modprobe br_netfilter

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Reload the changes from above
sudo sysctl --system

# Installing the dependencies so containerd can be installed
sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates

# Adding Docker's official GPG key
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the Docker repository
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

# Install Docker
sudo apt-get install -y docker-ce docker-ce-cli docker-buildx-plugin docker-compose-plugin

# Run Docker rootless
sudo groupadd docker
sudo usermod -aG docker $USER
newgrp docker

# Install containerd
sudo apt update
sudo apt install -y containerd

# Configure containerd to use systemd as the cgroup
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

# Restart and enable containerd
sudo systemctl restart containerd
sudo systemctl enable containerd

# Install the Kubernetes Repos
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt update

# Install Kubernetes
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

SCRIPT

$provision_master_node = <<-SHELL
OUTPUT_FILE=/vagrant/join.sh
rm -rf $OUTPUT_FILE

# Start cluster
sudo kubeadm init --apiserver-advertise-address=10.0.0.10 --pod-network-cidr=192.168.0.0/16 | grep -E -- "kubeadm join|--discovery-token-ca-cert-hash" > ${OUTPUT_FILE}
chmod +x $OUTPUT_FILE

# Configure kubectl
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Fix kubelet IP
# sudo mkdir /etc/systemd/system/kubelet.service.d
# sudo touch /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
# echo 'Environment="KUBELET_EXTRA_ARGS=--node-ip=10.0.0.10"' | sudo tee -a /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
sudo rm /etc/default/kubelet
sudo touch /etc/default/kubelet
echo "KUBELET_EXTRA_ARGS=--node-ip=10.0.0.10" | sudo tee -a /etc/default/kubelet

# Restart the daemon
sudo systemctl daemon-reload
sudo systemctl restart kubelet

# Installing Calico
kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.2/manifests/tigera-operator.yaml
kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.2/manifests/custom-resources.yaml

# Installing flannel. The default install is using 10.244.0.0/16 for the IP range. This cluster is using something different so it needs to be changed. Flannel is the easier option
# wget https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
# sed -i 's/10.244/192.168/g' kube-flannel.yml
# kubectl apply -f kube-flannel.yml

# Modify kube-proxy so that Mettallb will work
# kubectl get configmap kube-proxy -n kube-system -o yaml | \
# sed -e "s/mode: \"\"/mode: \"ipvs\"/" | \
# kubectl apply --create-annotation -f - -n kube-system

# Modify kube-proxy so that Metallb will work pt2
# kubectl get configmap kube-proxy -n kube-system -o yaml | \
# sed -e "s/strictARP: false/strictARP: true/" | \
# kubectl apply -f - -n kube-system

# Install MetalLB
# kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.14.9/config/manifests/metallb-native.yaml

# Install the metallb configmap so the correct IP addresses are used
# kubectl apply -f - <<EOF
# apiVersion: metallb.io/v1beta1
# kind: IPAddressPool
# metadata:
#   name: first-pool
#   namespace: metallb-system
# spec:
#   addresses:
#   - 10.0.0.20-10.0.0.30
# ---
# apiVersion: metallb.io/v1beta1
# kind: L2Advertisement
# metadata:
#   name: example
#   namespace: metallb-system
# EOF

SHELL
